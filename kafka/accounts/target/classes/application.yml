server:
  port: 8080

spring:
  application:
    name: "accounts"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true # Habilita o circuit breaker para o todos Feign Clients dentro desse serviço
    function:
      definition: updateCommunication # Nome da função presente nesse MS
    stream:
      bindings:
        updateCommunication-in-0:
          destination: communication-sent # O nome da fila
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: send-communication # O nome da exchange
      kafka:
        binder:
          brokers:
            - localhost:9092
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"

eureka:
  instance:
    preferIpAddress: true # Para que o Eureka Server registre o IP da máquina, invés do hostname, pois não temos mapeamento por DNS ao rodar local.
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/ # URL do Eureka Server

info:
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true # Habilita o endpoint para verificar as infos do MS
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default: # Configuração padrão para o circuit breaker
      slidingWindowSize: 10 # Número de chamadas necessárias para abrir/fechar o circuito
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50 # Porcentagem de falhas para abrir o circuito
      waitDurationInOpenState: 10000 # Tempo em milissegundos (10s) que irá ficar no estado aberto, antes de ir para o semi-aberto

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000 # Tempo em milissegundos para esperar a resposta
      limitRefreshPeriod: 5000 # Tempo em milissegundos para resetar o contador
      limitForPeriod: 1 # Número de chamadas permitidas no período, ou seja, 1 chamada a cada 5 segundos

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException